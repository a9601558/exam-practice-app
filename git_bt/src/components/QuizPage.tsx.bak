import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { questionSets } from '../data/questionSets';
import QuestionCard from './QuestionCard';
import { useUser } from '../contexts/UserContext';
import LoginModal from './LoginModal';
import PaymentModal from './PaymentModal';
import RedeemCodeForm from './RedeemCodeForm';

const QuizPage = () => {
  const { quizId } = useParams<{ quizId: string }>();
  const navigate = useNavigate();
  const { user, addProgress, hasPurchased, getPurchaseExpiry } = useUser();
  
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [quizSet, setQuizSet] = useState(questionSets.find(set => set.id === quizId));
  const [isRandomMode, setIsRandomMode] = useState(false);
  const [questionsOrder, setQuestionsOrder] = useState<number[]>([]);
  const [answeredQuestions, setAnsweredQuestions] = useState<{
    index: number;
    isCorrect: boolean;
    selectedOption: string | string[];
  }[]>([]);
  const [showAnsweredQuestions, setShowAnsweredQuestions] = useState(false);
  const [onlyShowWrongAnswers, setOnlyShowWrongAnswers] = useState(false);
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [hasAccessToFullQuiz, setHasAccessToFullQuiz] = useState(false);
  const [expiryDate, setExpiryDate] = useState<string | null>(null);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [showRedeemForm, setShowRedeemForm] = useState(false);
  const [redeemSuccess, setRedeemSuccess] = useState(false);
  
  // 初始化题目顺序和检查付费权限
  useEffect(() => {
    if (!quizSet) return;
    
    // 初始化题目顺序
    initQuestionsOrder();
    
    // 检查付费权限
    checkPaymentAccess();
  }, [quizSet, quizId, user]);
  
  // 检查用户是否有权限访问完整题库
  const checkPaymentAccess = () => {
    if (!quizSet) return;
    
    // 免费题库直接可以访问
    if (!quizSet.isPaid) {
      setHasAccessToFullQuiz(true);
      return;
    }
    
    // 检查用户是否购买过此题库
    if (user && hasPurchased(quizSet.id)) {
      setHasAccessToFullQuiz(true);
      // 获取过期时间
      const expiry = getPurchaseExpiry(quizSet.id);
      if (expiry) {
        setExpiryDate(expiry.toISOString());
      } else {
        setExpiryDate(null);
      }
    } else {
      setHasAccessToFullQuiz(false);
      setExpiryDate(null);
    }
  };
  
  // 初始化题目顺序
  const initQuestionsOrder = () => {
    if (!quizSet) return;
    
    const totalQuestionsCount = quizSet.questions.length;
    if (isRandomMode) {
      // 随机模式：生成随机顺序
      const randomOrder = Array.from({ length: totalQuestionsCount }, (_, i) => i)
        .sort(() => Math.random() - 0.5);
      setQuestionsOrder(randomOrder);
    } else {
      // 顺序模式：按原始顺序
      setQuestionsOrder(Array.from({ length: totalQuestionsCount }, (_, i) => i));
    }
  };

  // 重新初始化顺序（当模式切换时）
  useEffect(() => {
    initQuestionsOrder();
  }, [isRandomMode]);

  // 离开页面或完成所有题目时保存进度
  useEffect(() => {
    // 组件卸载时保存进度
    return () => {
      saveProgress();
    };
  }, [answeredQuestions]);

  if (!quizSet) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">找不到题库</h2>
          <button 
            onClick={() => navigate('/')}
            className="bg-blue-600 text-white py-2 px-4 rounded-lg"
          >
            返回主页
          </button>
        </div>
      </div>
    );
  }

  const totalQuestions = quizSet.questions.length;
  
  // 获取当前实际的问题索引（基于顺序或随机模式）
  const currentActualQuestionIndex = questionsOrder[currentQuestionIndex] || 0;

  // 保存用户答题进度
  const saveProgress = () => {
    if (!user || !quizSet || answeredQuestions.length === 0) return;
    
    // 创建QuizProgress对象
    const progress = {
      questionSetId: quizSet.id,
      answeredQuestions: answeredQuestions.map(answer => ({
        questionId: String(quizSet.questions[answer.index].id), // 确保questionId是字符串
        selectedOptionId: typeof answer.selectedOption === 'string' 
          ? answer.selectedOption 
          : answer.selectedOption.join(','),
        isCorrect: answer.isCorrect
      })),
      score: Math.round(
        (answeredQuestions.filter(a => a.isCorrect).length / answeredQuestions.length) * 100
      ),
      lastAttemptDate: new Date()
    };
    
    // 调用addProgress保存进度
    addProgress(progress);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questionsOrder.length - 1) {
      // 检查下一题是否可访问
      const nextQuestionIndex = currentQuestionIndex + 1;
      const nextActualIndex = questionsOrder[nextQuestionIndex];
      
      if (!isTrialQuestion(nextActualIndex) && !hasAccessToFullQuiz) {
        // 如果下一题需要付费且用户未购买，显示付费弹窗
        setShowPaymentModal(true);
        return;
      }
      
      setCurrentQuestionIndex(nextQuestionIndex);
    } else {
      // 所有问题都已回答完毕
      saveProgress(); // 保存完整进度
      alert('恭喜你完成了所有问题！');
      // 返回主页
      navigate('/');
    }
  };

  const handleAnswerSubmitted = (questionIndex: number, isCorrect: boolean, selectedOption: string | string[]) => {
    // 记录用户回答
    setAnsweredQuestions([
      ...answeredQuestions, 
      { 
        index: questionIndex, 
        isCorrect, 
        selectedOption 
      }
    ]);
  };

  const toggleMode = () => {
    // 如果是付费题库且用户未购买，禁止使用随机模式
    if (quizSet.isPaid && !hasAccessToFullQuiz && !isRandomMode) {
      setShowPaymentModal(true);
      return;
    }
    
    setIsRandomMode(!isRandomMode);
    setCurrentQuestionIndex(0); // 切换模式时重置到第一题
  };

  const toggleShowAnswered = () => {
    setShowAnsweredQuestions(!showAnsweredQuestions);
    setOnlyShowWrongAnswers(false); // 重置错题筛选
  };

  // 切换仅显示错题
  const toggleShowOnlyWrong = () => {
    setOnlyShowWrongAnswers(!onlyShowWrongAnswers);
  };

  // 切换到指定题目
  const jumpToQuestion = (index: number) => {
    // 检查该题是否需要付费
    const actualIndex = questionsOrder[index];
    if (!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz) {
      setShowPaymentModal(true);
      return;
    }
    
    setCurrentQuestionIndex(index);
    setShowAnsweredQuestions(false);
  };

  // 计算错题数量
  const wrongAnswersCount = answeredQuestions.filter(q => !q.isCorrect).length;

  // 筛选要显示的答题记录
  const filteredAnsweredQuestions = onlyShowWrongAnswers 
    ? answeredQuestions.filter(q => !q.isCorrect)
    : answeredQuestions;

  // 检查是否是付费题库且用户未购买且不在试用范围内
  const isTrialQuestion = (index: number) => {
    if (!quizSet.isPaid) return true; // 免费题库
    if (hasAccessToFullQuiz) return true; // 已购买
    
    // 如果没有设置试用题目数，默认为0
    const trialCount = quizSet.trialQuestions || 0;
    
    // 试用题目范围内的题目
    return index < trialCount;
  };

  // 处理购买完成
  const handlePurchaseSuccess = () => {
    setShowPaymentModal(false);
    setHasAccessToFullQuiz(true);
    // 获取过期时间
    const expiry = getPurchaseExpiry(quizSet.id);
    if (expiry) {
      setExpiryDate(expiry.toISOString());
    } else {
      setExpiryDate(null);
    }
    // 显示支付成功提示
    setPaymentSuccess(true);
    // 3秒后关闭提示
    setTimeout(() => {
      setPaymentSuccess(false);
    }, 3000);
  };

  // 格式化到期日期为更友好的格式
  const formatExpiryDate = (dateString: string | null) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  // 计算剩余天数
  const calculateRemainingDays = (dateString: string | null) => {
    if (!dateString) return 0;
    
    const expiryDate = new Date(dateString);
    const today = new Date();
    const diffTime = expiryDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays > 0 ? diffDays : 0;
  };

  // 处理兑换成功
  const handleRedeemSuccess = (redeemedQuizId: string) => {
    if (redeemedQuizId === quizSet?.id) {
      // 兑换码兑换成功，重新检查权限
      checkPaymentAccess();
      // 显示成功消息
      setRedeemSuccess(true);
      setShowRedeemForm(false);
      // 3秒后关闭成功提示
      setTimeout(() => {
        setRedeemSuccess(false);
      }, 3000);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 py-8 px-4 sm:py-12 sm:px-6 lg:px-8">
      <div className="max-w-3xl mx-auto">
        {/* 支付成功提示 */}
        {paymentSuccess && (
          <div className="fixed top-4 right-4 bg-green-50 border-l-4 border-green-500 p-4 z-50 shadow-md animate-fade-in">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-green-700">
                  支付成功！您现在可以访问完整题库内容
                </p>
              </div>
            </div>
          </div>
        )}

        {/* 兑换成功提示 */}
        {redeemSuccess && (
          <div className="fixed top-4 right-4 bg-green-50 border-l-4 border-green-500 p-4 z-50 shadow-md animate-fade-in">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-green-700">
                  兑换码兑换成功！您现在可以访问完整题库内容
                </p>
              </div>
            </div>
          </div>
        )}

        {/* 剩余有效期提示 */}
        {expiryDate && (
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-blue-700">
                  您已购买此题库，剩余有效期: <span className="font-medium">{calculateRemainingDays(expiryDate)} 天</span> (到期日期: {formatExpiryDate(expiryDate)})
                </p>
              </div>
            </div>
          </div>
        )}

        {/* 付费题库提示 */}
        {quizSet.isPaid && !hasAccessToFullQuiz && (
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
            <div className="flex flex-col space-y-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3 flex-1 md:flex md:justify-between">
                  <p className="text-sm text-blue-700">
                    此题库为付费内容，价格: ¥{quizSet.price}
                    {quizSet.trialQuestions && quizSet.trialQuestions > 0
                      ? `，您可以免费试用前 ${quizSet.trialQuestions} 道题。`
                      : '，此题库不提供试用。'
                    }
                    <span className="font-medium ml-1">注意：随机模式只对付费用户开放</span>
                  </p>
                  <p className="mt-3 text-sm md:mt-0 md:ml-6">
                    <button
                      onClick={() => setShowPaymentModal(true)}
                      className="whitespace-nowrap font-medium text-blue-700 hover:text-blue-600"
                    >
                      购买完整题库 <span aria-hidden="true">&rarr;</span>
                    </button>
                  </p>
                </div>
              </div>
              
              {/* 兑换码选项 */}
              {user && (
                <div className="border-t border-blue-300 pt-3">
                  <div className="flex flex-col sm:flex-row justify-between items-center">
                    <div className="mb-3 sm:mb-0">
                      <h3 className="text-sm font-medium text-blue-700">有兑换码？</h3>
                      <p className="text-xs text-blue-600">
                        您可以输入兑换码来获取此题库的访问权限
                      </p>
                    </div>
                    <button 
                      onClick={() => setShowRedeemForm(!showRedeemForm)}
                      className="inline-flex items-center px-3 py-1.5 border border-blue-500 rounded-md shadow-sm text-sm font-medium text-blue-700 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      <svg className="h-4 w-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                      </svg>
                      {showRedeemForm ? '关闭兑换' : '使用兑换码'}
                    </button>
                  </div>
                  
                  {showRedeemForm && (
                    <div className="mt-3">
                      <RedeemCodeForm onRedeemSuccess={handleRedeemSuccess} />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}

        {/* 未登录用户提示 */}
        {!user && answeredQuestions.length > 0 && (
          <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm text-yellow-700">
                  您还未登录，答题进度不会被保存。
                  <button 
                    onClick={() => setIsLoginModalOpen(true)}
                    className="ml-2 font-medium underline"
                  >
                    立即登录
                  </button>
                </p>
              </div>
            </div>
          </div>
        )}
        
        {/* 模式切换和已答题目按钮 */}
        <div className="flex justify-between mb-4">
          <button
            onClick={toggleMode}
            className={`${
              quizSet.isPaid && !hasAccessToFullQuiz
                ? "bg-gray-400 cursor-not-allowed"  
                : "bg-blue-600 hover:bg-blue-700"
            } text-white py-2 px-4 rounded-md text-sm`}
            disabled={quizSet.isPaid && !hasAccessToFullQuiz && !isRandomMode}
          >
            {isRandomMode ? "切换到顺序模式" : "切换到随机模式"}
            {quizSet.isPaid && !hasAccessToFullQuiz && !isRandomMode && (
              <span className="ml-1 text-xs">（需购买）</span>
            )}
          </button>

          <div className="flex space-x-2">
            {user && answeredQuestions.length > 0 && (
              <button
                onClick={saveProgress}
                className="bg-green-600 text-white py-2 px-4 rounded-md text-sm hover:bg-green-700"
              >
                保存进度
              </button>
            )}
            
            <button
              onClick={toggleShowAnswered}
              className={`py-2 px-4 rounded-md text-sm ${
                answeredQuestions.length > 0 
                  ? "bg-blue-600 text-white hover:bg-blue-700" 
                  : "bg-gray-300 text-gray-500 cursor-not-allowed"
              }`}
              disabled={answeredQuestions.length === 0}
            >
              {showAnsweredQuestions ? "返回答题" : `查看已答题 (${answeredQuestions.length})`}
            </button>
          </div>
        </div>
        
        {/* 题目导航 */}
        <div className="bg-white shadow-md rounded-lg p-4 mb-4">
          <h3 className="text-sm font-medium text-gray-700 mb-2">题目导航</h3>
          <div className="flex flex-wrap gap-2">
            {questionsOrder.map((actualIndex, index) => (
              <button
                key={index}
                onClick={() => jumpToQuestion(index)}
                disabled={!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz}
                className={`h-8 w-8 flex items-center justify-center text-sm rounded-md ${
                  currentQuestionIndex === index
                    ? 'bg-blue-600 text-white'
                    : answeredQuestions.some(q => q.index === actualIndex)
                      ? answeredQuestions.find(q => q.index === actualIndex)?.isCorrect
                        ? 'bg-green-500 text-white'
                        : 'bg-red-500 text-white'
                      : 'bg-gray-200 text-gray-700'
                } ${!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-500 hover:text-white'}`}
              >
                {!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz ? (
                  <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                ) : (
                  index + 1
                )}
              </button>
            ))}
          </div>
        </div>
        
        {/* 显示当前答题状态或已答题记录 */}
        {showAnsweredQuestions ? (
          <div className="bg-white shadow-md rounded-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                已答题目 ({filteredAnsweredQuestions.length}/{totalQuestions})
              </h2>

              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">统计: </span>
                <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                  正确: {answeredQuestions.filter(q => q.isCorrect).length}
                </span>
                <span className="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">
                  错误: {wrongAnswersCount}
                </span>
              </div>
            </div>
            
            {/* 错题筛选器 */}
            {answeredQuestions.length > 0 && wrongAnswersCount > 0 && (
              <div className="flex items-center justify-end mb-4">
                <label className="inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={onlyShowWrongAnswers}
                    onChange={toggleShowOnlyWrong}
                    className="sr-only peer"
                  />
                  <div className="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"></div>
                  <span className="ml-3 text-sm font-medium text-gray-700">仅显示错题</span>
                </label>
              </div>
            )}
            
            {filteredAnsweredQuestions.length === 0 ? (
              <p className="text-gray-600">
                {onlyShowWrongAnswers 
                  ? "没有错题记录，太棒了！" 
                  : "还没有回答过任何题目"}
              </p>
            ) : (
              <div className="space-y-4">
                {filteredAnsweredQuestions.map((answeredQ, index) => {
                  const question = quizSet.questions[answeredQ.index];
                  return (
                    <div 
                      key={index} 
                      className={`p-4 border rounded-md ${
                        answeredQ.isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                      }`}
                    >
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-medium text-gray-800">
                          {index + 1}. {question.question}
                        </h3>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            answeredQ.isCorrect ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'
                          }`}>
                            {answeredQ.isCorrect ? '正确' : '错误'}
                          </span>
                          <span className="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800">
                            {question.questionType === 'single' ? '单选题' : '多选题'}
                          </span>
                        </div>
                      </div>
                      
                      {/* 显示回答详情 */}
                      {question.questionType === 'single' ? (
                        <p className="text-sm text-gray-600 mb-2">
                          你的答案: {answeredQ.selectedOption as string} - {
                            question.options.find(opt => opt.id === answeredQ.selectedOption)?.text
                          }
                        </p>
                      ) : (
                        <div className="mb-2">
                          <p className="text-sm text-gray-600">你的选择:</p>
                          <ul className="list-disc list-inside pl-2">
                            {(answeredQ.selectedOption as string[]).map((optId, idx) => (
                              <li key={idx} className="text-sm text-gray-600">
                                {optId} - {question.options.find(opt => opt.id === optId)?.text}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {!answeredQ.isCorrect && (
                        question.questionType === 'single' ? (
                          <p className="text-sm text-gray-600">
                            正确答案: {question.correctAnswer as string} - {
                              question.options.find(opt => opt.id === question.correctAnswer)?.text
                            }
                          </p>
                        ) : (
                          <div>
                            <p className="text-sm text-gray-600">正确答案:</p>
                            <ul className="list-disc list-inside pl-2">
                              {(question.correctAnswer as string[]).map((optId, idx) => (
                                <li key={idx} className="text-sm text-gray-600">
                                  {optId} - {question.options.find(opt => opt.id === optId)?.text}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )
                      )}
                      
                      <button 
                        onClick={() => jumpToQuestion(
                          questionsOrder.findIndex(q => q === answeredQ.index)
                        )}
                        className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                      >
                        重新查看此题
                      </button>
                    </div>
                  );
                })}
              </div>
            )}
            
            <button 
              onClick={() => setShowAnsweredQuestions(false)}
              className="mt-4 bg-blue-600 text-white py-2 px-4 rounded-md text-sm"
            >
              返回答题
            </button>
          </div>
        ) : (
          // 检查当前题目是否需要付费
          !isTrialQuestion(currentActualQuestionIndex) && !hasAccessToFullQuiz ? (
            <div className="bg-white shadow-md rounded-lg p-6 text-center">
              <svg className="h-16 w-16 mx-auto text-yellow-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
              <h2 className="text-lg font-semibold text-gray-900 mb-2">付费内容</h2>
              <p className="text-gray-600 mb-4">
                此题库的免费试用题目已用完，需要购买完整版（¥{quizSet.price}）才能继续。购买后有效期为6个月。
              </p>

              <div className="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3 justify-center">
                <button
                  onClick={() => setShowPaymentModal(true)}
                  className="inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <svg className="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  购买完整题库
                </button>

                {user && (
                  <button
                    onClick={() => setShowRedeemForm(!showRedeemForm)}
                    className="inline-flex justify-center items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md shadow-sm text-blue-700 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                    </svg>
                    使用兑换码
                  </button>
                )}
              </div>

              {showRedeemForm && (
                <div className="mt-4">
                  <RedeemCodeForm onRedeemSuccess={handleRedeemSuccess} />
                </div>
              )}
            </div>
          ) : (
            <QuestionCard
              question={quizSet.questions[currentActualQuestionIndex]}
              onNext={handleNextQuestion}
              onAnswerSubmitted={(isCorrect: boolean, selectedOption: string | string[]) => 
                handleAnswerSubmitted(currentActualQuestionIndex, isCorrect, selectedOption)
              }
              questionNumber={currentQuestionIndex + 1}
              totalQuestions={totalQuestions}
              quizTitle={quizSet.title}
            />
          )
        )}
      </div>
      
      {/* 登录弹窗 */}
      <LoginModal isOpen={isLoginModalOpen} onClose={() => setIsLoginModalOpen(false)} />

      {/* 支付弹窗 */}
      {showPaymentModal && (
        <PaymentModal 
          isOpen={showPaymentModal}
          onClose={() => setShowPaymentModal(false)}
          questionSet={quizSet}
          onSuccess={handlePurchaseSuccess}
        />
      )}
    </div>
  );
};

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { questionSets } from '../data/questionSets';
import QuestionCard from './QuestionCard';
import { useUser } from '../contexts/UserContext';
import LoginModal from './LoginModal';
import PaymentModal from './PaymentModal';
import RedeemCodeForm from './RedeemCodeForm';

const QuizPage = () => {
  const { quizId } = useParams<{ quizId: string }>();
  const navigate = useNavigate();
  const { user, addProgress, hasPurchased, getPurchaseExpiry } = useUser();
  
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [quizSet, setQuizSet] = useState(questionSets.find(set => set.id === quizId));
  const [isRandomMode, setIsRandomMode] = useState(false);
  const [questionsOrder, setQuestionsOrder] = useState<number[]>([]);
  const [answeredQuestions, setAnsweredQuestions] = useState<{
    index: number;
    isCorrect: boolean;
    selectedOption: string | string[];
  }[]>([]);
  const [showAnsweredQuestions, setShowAnsweredQuestions] = useState(false);
  const [onlyShowWrongAnswers, setOnlyShowWrongAnswers] = useState(false);
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [hasAccessToFullQuiz, setHasAccessToFullQuiz] = useState(false);
  const [expiryDate, setExpiryDate] = useState<string | null>(null);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [showRedeemForm, setShowRedeemForm] = useState(false);
  const [redeemSuccess, setRedeemSuccess] = useState(false);
  
  // 初始化题目顺序和检查付费权限
  useEffect(() => {
    if (!quizSet) return;
    
    // 初始化题目顺序
    initQuestionsOrder();
    
    // 检查付费权限
    checkPaymentAccess();
  }, [quizSet, quizId, user]);
  
  // 检查用户是否有权限访问完整题库
  const checkPaymentAccess = () => {
    if (!quizSet) return;
    
    // 免费题库直接可以访问
    if (!quizSet.isPaid) {
      setHasAccessToFullQuiz(true);
      return;
    }
    
    // 检查用户是否购买过此题库
    if (user && hasPurchased(quizSet.id)) {
      setHasAccessToFullQuiz(true);
      // 获取过期时间
      const expiry = getPurchaseExpiry(quizSet.id);
      setExpiryDate(expiry);
    } else {
      setHasAccessToFullQuiz(false);
      setExpiryDate(null);
    }
  };
  
  // 初始化题目顺序
  const initQuestionsOrder = () => {
    if (!quizSet) return;
    
    const totalQuestionsCount = quizSet.questions.length;
    if (isRandomMode) {
      // 随机模式：生成随机顺序
      const randomOrder = Array.from({ length: totalQuestionsCount }, (_, i) => i)
        .sort(() => Math.random() - 0.5);
      setQuestionsOrder(randomOrder);
    } else {
      // 顺序模式：按原始顺序
      setQuestionsOrder(Array.from({ length: totalQuestionsCount }, (_, i) => i));
    }
  };

  // 重新初始化顺序（当模式切换时）
  useEffect(() => {
    initQuestionsOrder();
  }, [isRandomMode]);

  // 离开页面或完成所有题目时保存进度
  useEffect(() => {
    // 组件卸载时保存进度
    return () => {
      saveProgress();
    };
  }, [answeredQuestions]);

  if (!quizSet) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">找不到题库</h2>
          <button 
            onClick={() => navigate('/')}
            className="bg-blue-600 text-white py-2 px-4 rounded-lg"
          >
            返回主页
          </button>
        </div>
      </div>
    );
  }

  const totalQuestions = quizSet.questions.length;
  
  // 获取当前实际的问题索引（基于顺序或随机模式）
  const currentActualQuestionIndex = questionsOrder[currentQuestionIndex] || 0;

  // 保存用户答题进度
  const saveProgress = () => {
    if (!user || !quizSet || answeredQuestions.length === 0) return;
    
    // 创建QuizProgress对象
    const progress = {
      questionSetId: quizSet.id,
      answeredQuestions: answeredQuestions.map(answer => ({
        questionId: quizSet.questions[answer.index].id,
        selectedOptionId: typeof answer.selectedOption === 'string' 
          ? answer.selectedOption 
          : answer.selectedOption.join(','),
        isCorrect: answer.isCorrect
      })),
      score: Math.round(
        (answeredQuestions.filter(a => a.isCorrect).length / answeredQuestions.length) * 100
      ),
      lastAttemptDate: new Date()
    };
    
    // 调用addProgress保存进度
    addProgress(progress);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questionsOrder.length - 1) {
      // 检查下一题是否可访问
      const nextQuestionIndex = currentQuestionIndex + 1;
      const nextActualIndex = questionsOrder[nextQuestionIndex];
      
      if (!isTrialQuestion(nextActualIndex) && !hasAccessToFullQuiz) {
        // 如果下一题需要付费且用户未购买，显示付费弹窗
        setShowPaymentModal(true);
        return;
      }
      
      setCurrentQuestionIndex(nextQuestionIndex);
    } else {
      // 所有问题都已回答完毕
      saveProgress(); // 保存完整进度
      alert('恭喜你完成了所有问题！');
      // 返回主页
      navigate('/');
    }
  };

  const handleAnswerSubmitted = (questionIndex: number, isCorrect: boolean, selectedOption: string | string[]) => {
    // 记录用户回答
    setAnsweredQuestions([
      ...answeredQuestions, 
      { 
        index: questionIndex, 
        isCorrect, 
        selectedOption 
      }
    ]);
  };

  const toggleMode = () => {
    // 如果是付费题库且用户未购买，禁止使用随机模式
    if (quizSet.isPaid && !hasAccessToFullQuiz && !isRandomMode) {
      setShowPaymentModal(true);
      return;
    }
    
    setIsRandomMode(!isRandomMode);
    setCurrentQuestionIndex(0); // 切换模式时重置到第一题
  };

  const toggleShowAnswered = () => {
    setShowAnsweredQuestions(!showAnsweredQuestions);
    setOnlyShowWrongAnswers(false); // 重置错题筛选
  };

  // 切换仅显示错题
  const toggleShowOnlyWrong = () => {
    setOnlyShowWrongAnswers(!onlyShowWrongAnswers);
  };

  // 切换到指定题目
  const jumpToQuestion = (index: number) => {
    // 检查该题是否需要付费
    const actualIndex = questionsOrder[index];
    if (!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz) {
      setShowPaymentModal(true);
      return;
    }
    
    setCurrentQuestionIndex(index);
    setShowAnsweredQuestions(false);
  };

  // 计算错题数量
  const wrongAnswersCount = answeredQuestions.filter(q => !q.isCorrect).length;

  // 筛选要显示的答题记录
  const filteredAnsweredQuestions = onlyShowWrongAnswers 
    ? answeredQuestions.filter(q => !q.isCorrect)
    : answeredQuestions;

  // 检查是否是付费题库且用户未购买且不在试用范围内
  const isTrialQuestion = (index: number) => {
    if (!quizSet.isPaid) return true; // 免费题库
    if (hasAccessToFullQuiz) return true; // 已购买
    
    // 如果没有设置试用题目数，默认为0
    const trialCount = quizSet.trialQuestions || 0;
    
    // 试用题目范围内的题目
    return index < trialCount;
  };

  // 处理购买完成
  const handlePurchaseSuccess = () => {
    setShowPaymentModal(false);
    setHasAccessToFullQuiz(true);
    // 获取过期时间
    const expiry = getPurchaseExpiry(quizSet.id);
    setExpiryDate(expiry);
    // 显示支付成功提示
    setPaymentSuccess(true);
    // 3秒后关闭提示
    setTimeout(() => {
      setPaymentSuccess(false);
    }, 3000);
  };

  // 格式化到期日期为更友好的格式
  const formatExpiryDate = (dateString: string | null) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  // 计算剩余天数
  const calculateRemainingDays = (dateString: string | null) => {
    if (!dateString) return 0;
    
    const expiryDate = new Date(dateString);
    const today = new Date();
    const diffTime = expiryDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays > 0 ? diffDays : 0;
  };

  // 处理兑换成功
  const handleRedeemSuccess = (redeemedQuizId: string) => {
    if (redeemedQuizId === quizSet?.id) {
      // 兑换码兑换成功，重新检查权限
      checkPaymentAccess();
      // 显示成功消息
      setRedeemSuccess(true);
      setShowRedeemForm(false);
      // 3秒后关闭成功提示
      setTimeout(() => {
        setRedeemSuccess(false);
      }, 3000);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 py-8 px-4 sm:py-12 sm:px-6 lg:px-8">
      <div className="max-w-3xl mx-auto">
        {/* 支付成功提示 */}
        {paymentSuccess && (
          <div className="fixed top-4 right-4 bg-green-50 border-l-4 border-green-500 p-4 z-50 shadow-md animate-fade-in">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-green-700">
                  支付成功！您现在可以访问完整题库内容
                </p>
              </div>
            </div>
          </div>
        )}

        {/* 兑换成功提示 */}
        {redeemSuccess && (
          <div className="fixed top-4 right-4 bg-green-50 border-l-4 border-green-500 p-4 z-50 shadow-md animate-fade-in">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-green-700">
                  兑换码兑换成功！您现在可以访问完整题库内容
                </p>
              </div>
            </div>
          </div>
        )}

        {/* 剩余有效期提示 */}
        {expiryDate && (
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-blue-700">
                  您已购买此题库，剩余有效期: <span className="font-medium">{calculateRemainingDays(expiryDate)} 天</span> (到期日期: {formatExpiryDate(expiryDate)})
                </p>
              </div>
            </div>
          </div>
        )}

        {/* 付费题库提示 */}
        {quizSet.isPaid && !hasAccessToFullQuiz && (
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
            <div className="flex flex-col space-y-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3 flex-1 md:flex md:justify-between">
                  <p className="text-sm text-blue-700">
                    此题库为付费内容，价格: ¥{quizSet.price}
                    {quizSet.trialQuestions && quizSet.trialQuestions > 0
                      ? `，您可以免费试用前 ${quizSet.trialQuestions} 道题。`
                      : '，此题库不提供试用。'
                    }
                    <span className="font-medium ml-1">注意：随机模式只对付费用户开放</span>
                  </p>
                  <p className="mt-3 text-sm md:mt-0 md:ml-6">
                    <button
                      onClick={() => setShowPaymentModal(true)}
                      className="whitespace-nowrap font-medium text-blue-700 hover:text-blue-600"
                    >
                      购买完整题库 <span aria-hidden="true">&rarr;</span>
                    </button>
                  </p>
                </div>
              </div>
              
              {/* 兑换码选项 */}
              {user && (
                <div className="border-t border-blue-300 pt-3">
                  <div className="flex flex-col sm:flex-row justify-between items-center">
                    <div className="mb-3 sm:mb-0">
                      <h3 className="text-sm font-medium text-blue-700">有兑换码？</h3>
                      <p className="text-xs text-blue-600">
                        您可以输入兑换码来获取此题库的访问权限
                      </p>
                    </div>
                    <button 
                      onClick={() => setShowRedeemForm(!showRedeemForm)}
                      className="inline-flex items-center px-3 py-1.5 border border-blue-500 rounded-md shadow-sm text-sm font-medium text-blue-700 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      <svg className="h-4 w-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                      </svg>
                      {showRedeemForm ? '关闭兑换' : '使用兑换码'}
                    </button>
                  </div>
                  
                  {showRedeemForm && (
                    <div className="mt-3">
                      <RedeemCodeForm onRedeemSuccess={handleRedeemSuccess} />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}

        {/* 未登录用户提示 */}
        {!user && answeredQuestions.length > 0 && (
          <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm text-yellow-700">
                  您还未登录，答题进度不会被保存。
                  <button 
                    onClick={() => setIsLoginModalOpen(true)}
                    className="ml-2 font-medium underline"
                  >
                    立即登录
                  </button>
                </p>
              </div>
            </div>
          </div>
        )}
        
        {/* 模式切换和已答题目按钮 */}
        <div className="flex justify-between mb-4">
          <button
            onClick={toggleMode}
            className={`${
              quizSet.isPaid && !hasAccessToFullQuiz
                ? "bg-gray-400 cursor-not-allowed"  
                : "bg-blue-600 hover:bg-blue-700"
            } text-white py-2 px-4 rounded-md text-sm`}
            disabled={quizSet.isPaid && !hasAccessToFullQuiz && !isRandomMode}
          >
            {isRandomMode ? "切换到顺序模式" : "切换到随机模式"}
            {quizSet.isPaid && !hasAccessToFullQuiz && !isRandomMode && (
              <span className="ml-1 text-xs">（需购买）</span>
            )}
          </button>

          <div className="flex space-x-2">
            {user && answeredQuestions.length > 0 && (
              <button
                onClick={saveProgress}
                className="bg-green-600 text-white py-2 px-4 rounded-md text-sm hover:bg-green-700"
              >
                保存进度
              </button>
            )}
            
            <button
              onClick={toggleShowAnswered}
              className={`py-2 px-4 rounded-md text-sm ${
                answeredQuestions.length > 0 
                  ? "bg-blue-600 text-white hover:bg-blue-700" 
                  : "bg-gray-300 text-gray-500 cursor-not-allowed"
              }`}
              disabled={answeredQuestions.length === 0}
            >
              {showAnsweredQuestions ? "返回答题" : `查看已答题 (${answeredQuestions.length})`}
            </button>
          </div>
        </div>
        
        {/* 题目导航 */}
        <div className="bg-white shadow-md rounded-lg p-4 mb-4">
          <h3 className="text-sm font-medium text-gray-700 mb-2">题目导航</h3>
          <div className="flex flex-wrap gap-2">
            {questionsOrder.map((actualIndex, index) => (
              <button
                key={index}
                onClick={() => jumpToQuestion(index)}
                disabled={!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz}
                className={`h-8 w-8 flex items-center justify-center text-sm rounded-md ${
                  currentQuestionIndex === index
                    ? 'bg-blue-600 text-white'
                    : answeredQuestions.some(q => q.index === actualIndex)
                      ? answeredQuestions.find(q => q.index === actualIndex)?.isCorrect
                        ? 'bg-green-500 text-white'
                        : 'bg-red-500 text-white'
                      : 'bg-gray-200 text-gray-700'
                } ${!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-500 hover:text-white'}`}
              >
                {!isTrialQuestion(actualIndex) && !hasAccessToFullQuiz ? (
                  <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                ) : (
                  index + 1
                )}
              </button>
            ))}
          </div>
        </div>
        
        {/* 显示当前答题状态或已答题记录 */}
        {showAnsweredQuestions ? (
          <div className="bg-white shadow-md rounded-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                已答题目 ({filteredAnsweredQuestions.length}/{totalQuestions})
              </h2>

              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">统计: </span>
                <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                  正确: {answeredQuestions.filter(q => q.isCorrect).length}
                </span>
                <span className="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">
                  错误: {wrongAnswersCount}
                </span>
              </div>
            </div>
            
            {/* 错题筛选器 */}
            {answeredQuestions.length > 0 && wrongAnswersCount > 0 && (
              <div className="flex items-center justify-end mb-4">
                <label className="inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={onlyShowWrongAnswers}
                    onChange={toggleShowOnlyWrong}
                    className="sr-only peer"
                  />
                  <div className="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"></div>
                  <span className="ml-3 text-sm font-medium text-gray-700">仅显示错题</span>
                </label>
              </div>
            )}
            
            {filteredAnsweredQuestions.length === 0 ? (
              <p className="text-gray-600">
                {onlyShowWrongAnswers 
                  ? "没有错题记录，太棒了！" 
                  : "还没有回答过任何题目"}
              </p>
            ) : (
              <div className="space-y-4">
                {filteredAnsweredQuestions.map((answeredQ, index) => {
                  const question = quizSet.questions[answeredQ.index];
                  return (
                    <div 
                      key={index} 
                      className={`p-4 border rounded-md ${
                        answeredQ.isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                      }`}
                    >
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-medium text-gray-800">
                          {index + 1}. {question.question}
                        </h3>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            answeredQ.isCorrect ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'
                          }`}>
                            {answeredQ.isCorrect ? '正确' : '错误'}
                          </span>
                          <span className="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800">
                            {question.questionType === 'single' ? '单选题' : '多选题'}
                          </span>
                        </div>
                      </div>
                      
                      {/* 显示回答详情 */}
                      {question.questionType === 'single' ? (
                        <p className="text-sm text-gray-600 mb-2">
                          你的答案: {answeredQ.selectedOption as string} - {
                            question.options.find(opt => opt.id === answeredQ.selectedOption)?.text
                          }
                        </p>
                      ) : (
                        <div className="mb-2">
                          <p className="text-sm text-gray-600">你的选择:</p>
                          <ul className="list-disc list-inside pl-2">
                            {(answeredQ.selectedOption as string[]).map((optId, idx) => (
                              <li key={idx} className="text-sm text-gray-600">
                                {optId} - {question.options.find(opt => opt.id === optId)?.text}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {!answeredQ.isCorrect && (
                        question.questionType === 'single' ? (
                          <p className="text-sm text-gray-600">
                            正确答案: {question.correctAnswer as string} - {
                              question.options.find(opt => opt.id === question.correctAnswer)?.text
                            }
                          </p>
                        ) : (
                          <div>
                            <p className="text-sm text-gray-600">正确答案:</p>
                            <ul className="list-disc list-inside pl-2">
                              {(question.correctAnswer as string[]).map((optId, idx) => (
                                <li key={idx} className="text-sm text-gray-600">
                                  {optId} - {question.options.find(opt => opt.id === optId)?.text}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )
                      )}
                      
                      <button 
                        onClick={() => jumpToQuestion(
                          questionsOrder.findIndex(q => q === answeredQ.index)
                        )}
                        className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                      >
                        重新查看此题
                      </button>
                    </div>
                  );
                })}
              </div>
            )}
            
            <button 
              onClick={() => setShowAnsweredQuestions(false)}
              className="mt-4 bg-blue-600 text-white py-2 px-4 rounded-md text-sm"
            >
              返回答题
            </button>
          </div>
        ) : (
          // 检查当前题目是否需要付费
          !isTrialQuestion(currentActualQuestionIndex) && !hasAccessToFullQuiz ? (
            <div className="bg-white shadow-md rounded-lg p-6 text-center">
              <svg className="h-16 w-16 mx-auto text-yellow-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
              <h2 className="text-lg font-semibold text-gray-900 mb-2">付费内容</h2>
              <p className="text-gray-600 mb-4">
                此题库的免费试用题目已用完，需要购买完整版（¥{quizSet.price}）才能继续。购买后有效期为6个月。
              </p>

              <div className="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3 justify-center">
                <button
                  onClick={() => setShowPaymentModal(true)}
                  className="inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <svg className="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  购买完整题库
                </button>

                {user && (
                  <button
                    onClick={() => setShowRedeemForm(!showRedeemForm)}
                    className="inline-flex justify-center items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md shadow-sm text-blue-700 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                    </svg>
                    使用兑换码
                  </button>
                )}
              </div>

              {showRedeemForm && (
                <div className="mt-4">
                  <RedeemCodeForm onRedeemSuccess={handleRedeemSuccess} />
                </div>
              )}
            </div>
          ) : (
            <QuestionCard
              question={quizSet.questions[currentActualQuestionIndex]}
              onNext={handleNextQuestion}
              onAnswerSubmitted={(isCorrect: boolean, selectedOption: string | string[]) => 
                handleAnswerSubmitted(currentActualQuestionIndex, isCorrect, selectedOption)
              }
              questionNumber={currentQuestionIndex + 1}
              totalQuestions={totalQuestions}
              quizTitle={quizSet.title}
            />
          )
        )}
      </div>
      
      {/* 登录弹窗 */}
      <LoginModal isOpen={isLoginModalOpen} onClose={() => setIsLoginModalOpen(false)} />

      {/* 支付弹窗 */}
      {showPaymentModal && (
        <PaymentModal 
          isOpen={showPaymentModal}
          onClose={() => setShowPaymentModal(false)}
          questionSet={quizSet}
          onSuccess={handlePurchaseSuccess}
        />
      )}
    </div>
  );
};

export default QuizPage; 